// main.go
package main

import (
	"fmt"
	"strings"
	"text/template"

	"google.golang.org/protobuf/compiler/protogen"
)

const tmpl = `// Code generated by protoc-gen-autoregisterpair. DO NOT EDIT.
package {{.PackageName}}
import (
    "github.com/murang/potato/pb"
    "reflect"
)

func init() {
    {{- range .Messages}}
    pb.RegisterMsgPair(uint32({{ .Id }}), {{ .C2S }}, {{ .S2C }})
    {{- end }}
}
`

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, file := range gen.Files {
			if !file.Generate {
				continue
			}

			// 1. 为消息文件生成自动注册文件
			filename := file.GeneratedFilenamePrefix + "_autoregisterpair.go"
			g := gen.NewGeneratedFile(filename, file.GoImportPath)

			// 2. 准备模板数据
			data := struct {
				PackageName string
				Messages    []any
			}{
				PackageName: string(file.GoPackageName),
				Messages:    extractMessages(file),
			}

			t, err := template.New("autoregisterpair").Parse(tmpl)
			if err != nil {
				return err
			}

			var buf strings.Builder
			if err = t.Execute(&buf, data); err != nil {
				return err
			}

			g.P(buf.String())
		}
		return nil
	})
}

// 解析消息id
func extractMessages(file *protogen.File) (messages []any) {
	c2sMap := make(map[string]struct{})
	s2cMap := make(map[string]struct{})

	for _, msg := range file.Messages {
		msgName := msg.GoIdent.GoName
		if strings.HasPrefix(msgName, "C2S_") {
			c2sMap[msgName] = struct{}{}
		}
		if strings.HasPrefix(msgName, "S2C_") {
			s2cMap[msgName] = struct{}{}
		}
	}

	for _, enum := range file.Enums {
		if enum.GoIdent.GoName != "MsgId" {
			continue
		}
		messages = make([]any, 0)
		for _, value := range enum.Values {
			parts := strings.Split(value.GoIdent.GoName, "_")
			if len(parts) != 2 || (len(parts) == 2 && parts[1] == "Unknown") { // MsgId_xxx
				continue // Unknown占位 不注册
			}

			id := parts[1]

			c2sStr := "nil"
			s2cStr := "nil"

			if _, ok := c2sMap[fmt.Sprintf("C2S_%s", id)]; ok {
				c2sStr = fmt.Sprintf("reflect.TypeOf(C2S_%s{})", id)
			}
			if _, ok := s2cMap[fmt.Sprintf("S2C_%s", id)]; ok {
				s2cStr = fmt.Sprintf("reflect.TypeOf(S2C_%s{})", id)
			}

			messages = append(messages, struct {
				Id  string
				C2S string
				S2C string
			}{
				Id:  value.GoIdent.GoName,
				C2S: c2sStr,
				S2C: s2cStr,
			})
		}
	}

	return
}
