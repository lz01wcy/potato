// main.go
package main

import (
	"fmt"
	"strings"
	"text/template"

	"google.golang.org/protobuf/compiler/protogen"
)

const tmpl = `// Code generated by protoc-gen-autoregister. DO NOT EDIT.
package {{.PackageName}}
import (
    "github.com/murang/potato/pb"
    "reflect"
)

func init() {
    {{- range .Messages}}
    pb.RegisterMsg(uint32({{ .Id }}), reflect.TypeOf(&{{ .Message }}{}))
    {{- end }}
}
`

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, file := range gen.Files {
			if !file.Generate {
				continue
			}

			// 1. 为消息文件生成自动注册文件
			filename := file.GeneratedFilenamePrefix + "_autoregister.go"
			g := gen.NewGeneratedFile(filename, file.GoImportPath)

			// 2. 准备模板数据
			data := struct {
				PackageName string
				Messages    []any
			}{
				PackageName: string(file.GoPackageName),
				Messages:    extractMessages(file.Enums),
			}

			t, err := template.New("autoregister").Parse(tmpl)
			if err != nil {
				return err
			}

			var buf strings.Builder
			if err := t.Execute(&buf, data); err != nil {
				return err
			}

			g.P(buf.String())
		}
		return nil
	})
}

// 解析消息id
func extractMessages(enums []*protogen.Enum) (messages []any) {
	{
		for _, enum := range enums {
			if enum.GoIdent.GoName != "MsgId" {
				continue
			}
			messages = make([]any, 0)
			for _, value := range enum.Values {
				parts := strings.Split(value.GoIdent.GoName, "_")
				if len(parts) != 3 { // MsgId_c2s_xxx
					continue // 比如Unknown之类的 不注册
				}
				message := fmt.Sprintf("%s_%s", strings.ToUpper(parts[1]), parts[2])
				messages = append(messages, struct {
					Id      string
					Message string
				}{
					Id:      value.GoIdent.GoName,
					Message: message,
				})
			}
		}
		return
	}
}
